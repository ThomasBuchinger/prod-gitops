apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets

# ---
# apiVersion: external-secrets.io/v1beta1
# kind: ClusterSecretStore
# metadata:
#   name: vault-approle-cluster
#   annotations:
#      argocd.argoproj.io/sync-wave: "2"
# spec:
#   provider:
#     vault:
#       server: "https://vault.buc.sh"
#       path: "cluster/"
#       version: "v2"
#       auth:
#         appRole:
#           path: "approle"
#           roleId: prod
#           secretRef:
#             name: "vault-secretid"
#             key: "secretid"
#             namespace: external-secrets

# ---
# apiVersion: external-secrets.io/v1beta1
# kind: ClusterSecretStore
# metadata:
#   name: vault-approle-secret
#   annotations:
#      argocd.argoproj.io/sync-wave: "2"
# spec:
#   provider:
#     vault:
#       server: "https://vault.buc.sh"
#       path: "secret/"
#       version: "v2"
#       auth:
#         appRole:
#           path: "approle"
#           roleId: prod
#           secretRef:
#             name: "vault-secretid"
#             key: "secretid"
#             namespace: external-secrets

---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: cluster-local
  annotations:
     argocd.argoproj.io/sync-wave: "2"
spec:
  provider:
    kubernetes:
      remoteNamespace: external-secrets
      server:
        url: "https://kubernetes.default.svc"
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          namespace: default
          key: ca.crt
      auth:
        serviceAccount:
          name: external-secrets
          namespace: external-secrets

---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: k8s-evergreen
  annotations:
     argocd.argoproj.io/sync-wave: "2"
spec:
  provider:
    kubernetes:
      remoteNamespace: prod
      server:
        url: "https://10.0.0.16:6443"
        caProvider:
          type: Secret
          name: evergreen-token
          namespace: external-secrets
          key: ca.crt
      auth:
        token:
          bearerToken:
            name: evergreen-token
            namespace: external-secrets
            key: token
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: test-k8s-css
  namespace: external-secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: k8s-evergreen
    kind: ClusterSecretStore
  target:
    name: cert-grafana-buc-sh
    creationPolicy: Owner
  dataFrom:
  # - find:
  #     conversionStrategy: Default
  #     decodingStrategy: None
  #     name:
  #       regexp: "cert-grafana-buc-sh"
    - extract:
      conversionStrategy: Default
      decodingStrategy: None
      key: cert/cert-grafana-buc-sh