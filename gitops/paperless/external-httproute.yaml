
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: paperless-mtls
spec:
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: external-gateway
    namespace: external-gateway
    sectionName: mtls
  hostnames:
  - "paperless.mtls.buc.sh"
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: paperless
      port: 8000
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /



---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyExtensionPolicy
metadata:
  name: lua-geoip-block
spec:
  targetRefs:
  - group: gateway.networking.k8s.io
    kind: HTTPRoute
    name: paperless-mtls
  lua:
  - type: Inline
    inline: |
      function envoy_on_request(request_handle)
        local headers = request_handle:headers()
        local headersMap = {}
        for key, value in pairs(headers) do
          headersMap[key] = value
        end
        request_handle:streamInfo():dynamicMetadata():set("envoy.lua","request_headers",headersMap)
        local requestBody = ""
        for chunk in request_handle:bodyChunks() do
          if (chunk:length() > 0) then
            requestBody = requestBody .. chunk:getBytes(0, chunk:length())
          end
        end
        request_handle:streamInfo():dynamicMetadata():set("envoy.lua","request_body",requestBody)
      end

      function envoy_on_response(response_handle)
        local headers = response_handle:headers()
        local headersMap = {}
        for key, value in pairs(headers) do
          headersMap[key] = value
        end
        response_handle:streamInfo():dynamicMetadata():set("envoy.lua","response_headers",headersMap)
        local responseBody = ""
        for chunk in response_handle:bodyChunks() do
          if (chunk:length() > 0) then
            responseBody = responseBody .. chunk:getBytes(0, chunk:length())
          end
        end
        response_handle:streamInfo():dynamicMetadata():set("envoy.lua","response_body",responseBody)
      end
