admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901

static_resources:
  listeners:
  # This is a template listener with YAML-Anchors to be reused
  #
  - name: template-listener
    address:
      socket_address:
        address: 127.0.0.1
        port_value: 9999
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: template
          access_log:
          - &jsonlog
            name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format:
                jsonFormat:
                  authority: "%REQ(:AUTHORITY)%"
                  method: "%REQ(:METHOD)%"
                  referer: "%REQ(REFERER)%"
                  request_id: "%REQ(X-REQUEST-ID)%"
                  path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  protocol: "%PROTOCOL%"
                  response_code: "%RESPONSE_CODE%"
                  response_flags: "%RESPONSE_FLAGS%"
                  route_name: "%ROUTE_NAME%"
                  upstream_host: "%UPSTREAM_HOST%"
                  user_agent: "%REQ(USER-AGENT)%"
                  x_agent_name: "%REQ(X-AGENTNAME)%"
                  x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                  x_geo_country: "%REQ(x-geo-country)%"
          tracing: &tracing
            provider:
              name: envoy.tracers.opentelemetry
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                grpc_service:
                  envoy_grpc:
                    cluster_name: opentelemetry_collector
                  timeout: 0.250s
                service_name: external-http
          http_filters:
          # Blocking any Request ype that is not GET.
          # We could have used RBAC configuration (https://www.envoyproxy.io/docs/envoy/v1.28.0/start/sandboxes/rbac), but that would have been more verbose
          #
          - &get_requests_only_lua
            name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  function envoy_on_request(request_handle)
                    if request_handle:headers():get(":method") ~= "GET" then
                      request_handle:respond(
                        {[":status"] = "301", [":method"] = "GET", ["Location"] = "https://www.wikipedia.org"},
                        "Only GET requests allowed")
                    end
                  end
          - &enable_cors
            name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
          - &csrf
            name: envoy.filters.http.csrf
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.csrf.v3.CsrfPolicy
              filter_enabled:
                default_value:
                  numerator: 100
                  denominator: HUNDRED
          - &geoip
            name: envoy.filters.http.geoip
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.geoip.v3.Geoip
              xff_config:
                xff_num_trusted_hops: 1
              provider:
                  name: "envoy.geoip_providers.maxmind"
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.geoip_providers.maxmind.v3.MaxMindConfig
                    common_provider_config:
                      geo_headers_to_add:
                        country: "x-geo-country"
                        # region: "x-geo-region"
                        city: "x-geo-city"
                        # asn: "x-geo-asn"
                    city_db_path: "/geoip-envoy/GeoLite2-City.mmdb"
                    # isp_db_path: "geoip/GeoLite2-ASN.mmdb"
          - &ratelimit
            name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              stat_prefix: https_rate_limit
              token_bucket:
                max_tokens: 2000
                tokens_per_fill: 100
                fill_interval: 1s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
              - append_action: OVERWRITE_IF_EXISTS_OR_ADD
                header:
                  key: x-local-rate-limit
                  value: 'true'
              local_rate_limit_per_downstream_connection: false
          - &auth_api
            name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              http_service:
                server_uri:
                  uri: external-homelab-api.external-homelabapi.svc:8080
                  cluster: public-homelabapi
                  timeout: 0.25s
                path_prefix: /auth
                authorization_request:
                  headers_to_add:
                  - key: X-Envoy-Authority
                    value: "%REQ(:AUTHORITY)%"
                  - key: X-Envoy-Path
                    value: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  - key: X-Envoy-Forwarded-For
                    value: "%REQ(X-FORWARDED-FOR)%"
              failure_mode_allow: false
              stat_prefix: "auth_api"
              transport_api_version: V3

            # TODO: Conget lua GET-only-filter to RABAC (for metrics support)
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: dummy
            virtual_hosts:
            - name: dummy
              domains: ["non-existent.example.lan"]
              routes: []
              cors: &cors_default
                  # allow_origin_string_match:
                  # - safe_regex:
                  #     regex: \*
                  allow_methods: "GET,POST,PUT,PATCH,DELETE,OPTIONS"
                  allow_headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Access-Control-Allow-Origin"
                  allow_credentials: true
                  max_age: "86400"
              # typed_per_filter_config:
 
  # Handle HTTP Traffic: Redirect everything to https
  #
  - name: http
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    per_connection_buffer_limit_bytes: 32768                        # 32 KB. [Recommended Setting](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager         # Assume all traffic is http and use the http-configuration (as opposed to TCP/UDP configuration)
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: public_http
          use_remote_address: true
          normalize_path: true
          merge_slashes: true
          path_with_escaped_slashes_action: UNESCAPE_AND_REDIRECT
          common_http_protocol_options:
            idle_timeout: 600s  # 10 mins
            headers_with_underscores_action: REJECT_REQUEST
          http2_protocol_options:
            max_concurrent_streams: 100
            initial_stream_window_size: 65536  # 64 KiB
            initial_connection_window_size: 1048576  # 1 MiB
          stream_idle_timeout: 600s  # 10 mins, must be disabled for long-lived and streaming requests
          request_timeout: 60s  # 1 min, must be disabled for long-lived and streaming requests                               # Don't Trust remote address in header. Use IP instead. [Recommended Setting](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
          access_log:
          - *jsonlog
          http_filters:                                             # Pass Request directly to the router, without any other filters
          - *auth_api
          - *geoip
          - *get_requests_only_lua
          - *ratelimit
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: http_redirect
            virtual_hosts:
            - name: all_hosts
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                redirect:
                  https_redirect: true
                  path_redirect: "/"
  # Main HTTPS Listener (router)
  #
  - name: https
    address:
      socket_address:
        address: "0.0.0.0"
        port_value: 8443
    listener_filters:
    - name: "envoy.filters.listener.tls_inspector"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
    per_connection_buffer_limit_bytes: 32768                        # 32 KB. [Recommended Setting](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
    filter_chains:
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain: {filename: "cert/tls.crt"}
              private_key: {filename: "cert/tls.key"}
            alpn_protocols: ["h2,http/1.1"]
      filters:
      - name: envoy.filters.network.http_connection_manager         # Assume all traffic is http and use the http-configuration (as opposed to TCP/UDP configuration)
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: public_https
          use_remote_address: true
          normalize_path: true
          merge_slashes: true
          path_with_escaped_slashes_action: UNESCAPE_AND_REDIRECT
          common_http_protocol_options:
            idle_timeout: 600s  # 10 mins
            headers_with_underscores_action: REJECT_REQUEST
          http2_protocol_options:
            max_concurrent_streams: 100
            initial_stream_window_size: 65536  # 64 KiB
            initial_connection_window_size: 1048576  # 1 MiB
          stream_idle_timeout: 600s  # 10 mins, must be disabled for long-lived and streaming requests
          request_timeout: 60s  # 1 min, must be disabled for long-lived and streaming requests                               # Don't Trust remote address in header. Use IP instead. [Recommended Setting](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
          generate_request_id: true
          preserve_external_request_id: true
          always_set_request_id_in_response: true
          upgrade_configs:
          - upgrade_type: websocket
          tracing: *tracing
          access_log:
          - *jsonlog
          http_filters:
          - *geoip
          - *auth_api
          # - *get_requests_only_lua
          - *ratelimit
          - *enable_cors
          - *csrf
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: main_router
            virtual_hosts:
            - name: api-cloud-buc-sh
              domains:
              - api.cloud.buc.sh
              cors: *cors_default
              routes:
              - match:
                  safe_regex:
                    regex: "/(index.html|404.html|favicon.ico)?$"
                route:
                  cluster: public-homelabapi
                  auto_host_rewrite: true
              - match:
                  prefix: "/_next"
                route:
                  cluster: public-homelabapi
                  auto_host_rewrite: true
              - match:
                  prefix: "/icons"
                route:
                  cluster: public-homelabapi
                  auto_host_rewrite: true
              - match:
                  prefix: "/api/public"
                route:
                  cluster: public-homelabapi
                  auto_host_rewrite: true
            - name: files-cloud-buc-sh
              domains:
              - files.cloud.buc.sh
              cors: *cors_default
              routes:
              - match:
                  path: "/"
                route:
                  cluster: hfs
                  auto_host_rewrite: true
              - match:
                  safe_regex:
                    regex: "/(public|guests|private).*"
                route:
                  cluster: hfs
                  auto_host_rewrite: true
              - match:
                  safe_regex:
                    regex: "/~/(api/get_|login|logout|frontend).*"
                route:
                  cluster: hfs
                  auto_host_rewrite: true
              - match:
                  prefix: "/~/api/"
                direct_response:
                  status: 403
                  body:
                    inline_string: "Not Allowed on Public Interface"
              - match:
                  prefix: "/nas"
                direct_response:
                  status: 403
                  body:
                    inline_string: "Not Allowed on Public Interface"
  # App Router for "hidden" (high-port) Services
  #
  - name: hidden_apps
    address:
      socket_address:
        address: "0.0.0.0"
        port_value: 8444
    listener_filters:
    - name: "envoy.filters.listener.tls_inspector"
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
    per_connection_buffer_limit_bytes: 32768                        # 32 KB. [Recommended Setting](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
    filter_chains:
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain: {filename: "cert/tls.crt"}
              private_key: {filename: "cert/tls.key"}
            alpn_protocols: ["h2,http/1.1"]
      filters:
      - name: envoy.filters.network.http_connection_manager         # Assume all traffic is http and use the http-configuration (as opposed to TCP/UDP configuration)
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: hidden_apps
          use_remote_address: true
          normalize_path: true
          merge_slashes: true
          path_with_escaped_slashes_action: UNESCAPE_AND_REDIRECT
          common_http_protocol_options:
            idle_timeout: 600s  # 10 mins
            headers_with_underscores_action: REJECT_REQUEST
          http2_protocol_options:
            max_concurrent_streams: 100
            initial_stream_window_size: 65536  # 64 KiB
            initial_connection_window_size: 1048576  # 1 MiB
          stream_idle_timeout: 600s  # 10 mins, must be disabled for long-lived and streaming requests
          request_timeout: 60s  # 1 min, must be disabled for long-lived and streaming requests                               # Don't Trust remote address in header. Use IP instead. [Recommended Setting](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
          generate_request_id: true
          preserve_external_request_id: true
          always_set_request_id_in_response: true
          upgrade_configs:
          - upgrade_type: websocket
          tracing: *tracing
          access_log:
          - *jsonlog
          http_filters:
          - *geoip
          # - *auth_api
          # - *get_requests_only_lua
          - *ratelimit
          - *enable_cors
          - *csrf
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: main_router
            virtual_hosts:
            - name: push-cloud-buc-sh
              domains:
              - 'push.cloud.buc.sh*'
              cors: *cors_default
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: ntfy
                  auto_host_rewrite: true
            # - name: app-router
            #   domains:
            #   - "*"
            #   cors: *cors_default
            #   routes:
            #   - match:
            #       prefix: "/"
            #     direct_response:
            #       status: 201
            #       body:
            #         inline_string: "Hello"


  clusters:
  - name: opentelemetry_collector
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options: {}
    load_assignment:
      cluster_name: opentelemetry_collector
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: tempo.monitoring.svc
                port_value: 4317
  - name: public-homelabapi
    type: LOGICAL_DNS
    load_assignment:
      cluster_name: public-homelabapi
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: external-homelab-api.external-homelabapi.svc
                port_value: 8080
    health_checks:
    - timeout: 3s
      interval: 30s
      unhealthy_threshold: 3
      healthy_threshold: 1
      http_health_check:
        path: "/api/livez"
  - name: hfs
    type: LOGICAL_DNS
    load_assignment:
      cluster_name: hfs
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: hfs.external-hfs.svc
                port_value: 8080
    health_checks:
    - timeout: 3s
      interval: 30s
      unhealthy_threshold: 3
      healthy_threshold: 1
      http_health_check:
        path: "/~/frontend/fontello.css"
  - name: ntfy
    type: LOGICAL_DNS
    load_assignment:
      cluster_name: ntfy
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: ntfy.ntfy.svc
                port_value: 8080
    health_checks:
    - timeout: 3s
      interval: 30s
      unhealthy_threshold: 3
      healthy_threshold: 1
      http_health_check:
        path: "/v1/health"
    # transport_socket:
    #   name: envoy.transport_sockets.tls
    #   typed_config:
    #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
    #     sni: status.buc.sh
    # typed_extension_protocol_options:
    #   envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
    #     "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
    #     explicit_http_config:
    #       http2_protocol_options:
    #         initial_stream_window_size: 65536  # 64 KiB
    #         initial_connection_window_size: 1048576  # 1 MiB

# Overload Manager stops accepting connection if memory is running out
# [Recommended Settings](https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge)
overload_manager:
  refresh_interval:
    # Check 4 times per second
    seconds: 0
    nanos: 250000000
  resource_monitors:
  # We only monitor HEAP space.
  - name: "envoy.resource_monitors.fixed_heap"
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig
      max_heap_size_bytes: 2147483648  # 2GB
  # Try closing connections at 95% HEAP, stop accepting new requests at 95% HEAP
  actions:
  - name: "envoy.overload_actions.disable_http_keepalive"
    triggers:
    - name: "envoy.resource_monitors.fixed_heap"
      threshold:
        value: 0.92
  - name: "envoy.overload_actions.stop_accepting_requests"
    triggers:
    - name: "envoy.resource_monitors.fixed_heap"
      threshold:
        value: 0.95
  loadshed_points:
  - name: "envoy.load_shed_points.tcp_listener_accept"
    triggers:
      - name: "envoy.resource_monitors.fixed_heap"
        threshold:
          value: 0.95
layered_runtime:
  layers:
  - name: static_layer_0
    static_layer:
      envoy:
        resource_limits:
          listener:
            http:
              connection_limit: 10000
            https:
              connection_limit: 10000
      overload:
        global_downstream_max_connections: 50000
