---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: external-cert
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-approle-cluster
    kind: ClusterSecretStore
  target:
    name: cert-cloud-buc-sh
    creationPolicy: Owner
  dataFrom:
  - extract:
      conversionStrategy: Default
      decodingStrategy: None
      key: cert/cert-secure-http-buc-sh

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-http
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: external-http
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/instance: external-http
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/instance: external-http
    spec:
      initContainers:
      - name: nginx-ui-dbprepare
        image: keinos/sqlite3:latest
        command:
        - /bin/sh
        - -c
        - "sqlite3 /etc/nginx-ui/database.db < /conf/dump.sql"
        volumeMounts:
        - name: nginx-ui-cm
          mountPath: /conf
        - name: etc-nginxui
          mountPath: /etc/nginx-ui
      - name: nginx-ui-copy-config
        image: uozi/nginx-ui
        command:
        - /bin/sh
        - /conf/prep_nginx_config.sh
        securityContext:
          capabilities:
            add:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETFCAP
            - SETGID
            - SETPCAP
            - SETUID
            - SYS_CHROOT
        volumeMounts:
        - name: nginx-ui-cm
          mountPath: /conf
        - name: nginx-sites
          mountPath: /sites
        - name: etc-nginxui
          mountPath: /etc/nginx-ui
        - name: etc-nginx
          mountPath: /etc/nginx
      containers:
      - name: nginx
        image: cgr.dev/chainguard/nginx:latest
        imagePullPolicy: IfNotPresent
        env: []
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources:
          requests:
            cpu: 5m
            memory: 64Mi
          limits: {}
        # securityContext:
        #   allowPrivilegeEscalation: false
        #   capabilities:
        #     add:
        #     - NET_BIND_SERVICE
        #     drop:
        #     - ALL
        #   seccompProfile:
        #     type: RuntimeDefault
        volumeMounts:
        - name: etc-nginx
          mountPath: /etc/nginx/
        - name: logs
          mountPath: /var/log/nginx
        - name: run
          mountPath: /run
        - name: nginx-cert
          mountPath: /etc/nginx/certs
        - name: tmpdir
          mountPath: /var/cache/nginx
        - name: nginx-sites
          mountPath: /etc/nginx/sites-available
      - name: nginx-ui
        image: uozi/nginx-ui
        imagePullPolicy: IfNotPresent
        command:
        - /app/nginx-ui
        - --config
        - /etc/nginx-ui/app.ini
        env: []
        ports:
        - name: ui
          containerPort: 9000
        livenessProbe:
        #   # failureThreshold: 3
        #   # periodSeconds: 10
        #   # successThreshold: 1
        #   # timeoutSeconds: 1
          httpGet:
            path: /
            port: ui
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: http
        resources:
          requests:
            cpu: 5m
            memory: 64Mi
          limits: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - SETFCAP
            - SETGID
            - SETPCAP
            - SETUID
            - SYS_CHROOT
            - NET_BIND_SERVICE
            # drop:
            # - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: etc-nginx
          mountPath: /etc/nginx/
        - name: logs
          mountPath: /var/log/nginx
        - name: run
          mountPath: /run
        - name: nginx-sites
          mountPath: /etc/nginx/sites-available
        - name: etc-nginxui
          mountPath: /etc/nginx-ui
        - name: tmpdir
          mountPath: /var/cache/nginx
      shareProcessNamespace: true
      securityContext: {}
      volumes:
      - name: etc-nginx
        emptyDir: {}
      - name: nginx-sites
        configMap:
          name: nginx-config
      - name: nginx-cert
        secret:
          secretName: cert-cloud-buc-sh
      - name: run
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: tmpdir
        emptyDir: {}
      - name: nginx-ui-cm
        configMap:
          name: nginx-ui
      - name: etc-nginxui
        emptyDir: {}

---
kind: Service
apiVersion: v1
metadata:
  name: external-http
spec:
  selector:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: external-http
  type: NodePort
  ports:
  - name: http
    port: 80
    nodePort: 32080
    targetPort: 8080
  - name: https
    port: 443
    nodePort: 32443
    targetPort: 8443
  - name: ui
    port: 9000
    targetPort: 9000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: external-http
spec:
  rules:
  - host: external-http.buc.sh
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: external-http
            port:
              name: ui

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: external-http-http
spec:
  rules:
  - host: external-http.10.0.0.21.nip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: external-http
            port:
              name: ui