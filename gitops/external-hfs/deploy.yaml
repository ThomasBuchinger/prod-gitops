---
apiVersion: v1
kind: Namespace
metadata:
  name: external-hfs
  labels:
    pod-security.kubernetes.io/enforce: restricted

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hfs
  namespace: external-hfs
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/app: hfs
  template:
    metadata:
      labels:
        app.kubernetes.io/app: hfs
    spec:
      initContainers:
      - name: copy-config
        image: docker.io/rejetto/hfs:v0.54.0
        command:
        - cp
        - -n
        - /template/hfs-config.yaml
        - /.hfs/config.yaml
        volumeMounts:
        - name: config-template
          mountPath: /template
        - name: config
          mountPath: /.hfs
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      containers:
      - name: hfs
        image: docker.io/rejetto/hfs:v0.54.0
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /.hfs
        - name: config-template
          mountPath: /template
        - name: data
          mountPath: /app/myDisk/nas
        - name: uploads
          mountPath: /app/myDisk/uploads
        env:
        - name: HFS_CREATE_ADMIN
          value: changeme
        - name: HFS_PORT
          value: "8080"
        resources:
          requests:
            cpu: 10m
            memory: 60M
        livenessProbe:
          httpGet:
            path: /
            port: http
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
        runAsGroup: 101
      volumes:
      - name: config
        emptyDir: {}
        # persistentVolumeClaim:
        #   claimName: hfs-config
      - name: config-template
        configMap:
          name: hfs-config
      - name: uploads
        persistentVolumeClaim:
          claimName: hfs-config
      - name: data
        persistentVolumeClaim:
          claimName: hfs-config

---
apiVersion: v1
kind: Service
metadata:
  name: hfs
  namespace: external-hfs
spec:
  selector:
    app.kubernetes.io/app: hfs
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http

# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: block-r2-egress
#   namespace: external-r2
# spec:
#   podSelector:
#     matchLabels:
#       app.kubernetes.io/app: s3manager
#       app.kubernetes.io/instance: r2
#   policyTypes:
#     - Egress
#     - Ingress
#   egress:
#   # Allow DNS Resolution
#   - to:
#     - namespaceSelector:
#         matchLabels:
#           kubernetes.io/metadata.name: kube-system
#     - podSelector:
#         matchLabels:
#           k8s-app: kube-dns
#     ports:
#     - protocol: UDP
#       port: 53
#     - protocol: TCP
#       port: 53
#   - to:
#     - ipBlock:
#         cidr: "10.0.0.19/32"
#     ports:
#     - port: 9000
#   ingress:
#   # Allow Ingress
#   - from:
#     - namespaceSelector:
#         matchLabels:
#           kubernetes.io/metadata.name: traefik
#     - namespaceSelector:
#         matchLabels:
#           kubernetes.io/metadata.name: external-http
#     ports:
#     - protocol: TCP
#       port: 8080

