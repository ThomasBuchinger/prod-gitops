apiVersion: v1
kind: Namespace
metadata:
  name: sqlite-backup
  labels:
    # Allow syncthing to use hostnetwork for it's Local LAN Discovery
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/version: latest

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: syncthing-init
data:
  init.sh: |-
    #!/bin/sh
    DIR=/var/syncthing
    set -eu

    mkdir -p $DIR/config
    # cp -f /tls-config/tls.crt $DIR/config/cert.pem
    # cp -f /tls-config/tls.key $DIR/config/key.pem
    if [ ! -f $DIR/config/config.xml ]; then
        syncthing generate --home $DIR/config --gui-user=admin --gui-password=changeme
        sed -i -e 's|<urAccepted>0</urAccepted>|<urAccepted>-1</urAccepted>|' -e 's|<urSeen>0</urSeen>|<urSeen>3</urSeen>|' $DIR/config/config.xml
    fi
    rm -rf $DIR/config/index-v2/*

    find $DIR/config



---
apiVersion: v1
kind: ConfigMap
metadata:
  name: litestream
data:
  litestream.yml: |-
    dbs:
    - path: /var/syncthing/config/index-v2/main.db
      replicas:
      - type: s3
        endpoint: http://s3.buc.sh:9000
        region: us-east-1
        bucket: litestream-backups
        path: syncthing


---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: syncthing-test-local
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  storageClassName: local-path
  volumeMode: Filesystem


# ---
# apiVersion: external-secrets.io/v1
# kind: ExternalSecret
# metadata:
#   name: syncthing-credentials
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: k8s-evergreen
#     kind: ClusterSecretStore
#   target:
#     name: eso-syncthing-credentials
#     creationPolicy: Owner
#   data:
#   - secretKey: ADMIN_USER
#     remoteRef:
#       key: static-secrets
#       property: cred_admin_user
#       conversionStrategy: Default
#       decodingStrategy: None
#       metadataPolicy: None
#   - secretKey: ADMIN_PASSWORD
#     remoteRef:
#       key: static-secrets
#       property: cred_admin_password
#       conversionStrategy: Default
#       decodingStrategy: None
#       metadataPolicy: None
# ---
# apiVersion: external-secrets.io/v1
# kind: ExternalSecret
# metadata:
#   name: syncthing-application
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: k8s-evergreen
#     kind: ClusterSecretStore
#   target:
#     name: eso-syncthing-application
#     creationPolicy: Owner
#   dataFrom:
#   - extract:
#       conversionStrategy: Default
#       decodingStrategy: None
#       key: syncthing-secrets
#       metadataPolicy: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncthing
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/app: syncthing
  template:
    metadata:
      labels:
        app.kubernetes.io/app: syncthing
    spec:
      initContainers:
      - name: gen-config
        command:
        - /bin/sh
        - /scripts/init.sh
        image: docker.io/syncthing/syncthing:2.0.3
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: db-sqlite
          mountPath: /var/syncthing/config/index-v2/
        - name: data-s3
          mountPath: /var/syncthing/
      - name: init-litestream
        image: litestream/litestream:0.3.13
        args:
        - 'restore'
        - '-if-db-not-exists'
        - '-if-replica-exists'
        - /var/syncthing/config/index-v2/main.db
        volumeMounts:
        - name: db-sqlite
          mountPath: /var/syncthing/config/index-v2
        - name: configmap
          mountPath: /etc/litestream.yml
          subPath: litestream.yml
        env:
        - name: LITESTREAM_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: eso-s3-credentials
              key: LITESTREAM_ACCESS_KEY_ID
        - name: LITESTREAM_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: eso-s3-credentials
              key: LITESTREAM_SECRET_ACCESS_KEY

      containers:
      - name: syncthing
        command:
        - syncthing
        - serve
        image: docker.io/syncthing/syncthing:2.0.3
        imagePullPolicy: IfNotPresent
        # env:
        # - name: STGUIAPIKEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: eso-syncthing-application
        #       key: apikey
        ports:
        - containerPort: 8384
          name: http
          protocol: TCP
        # - containerPort: 22000
        #   name: sync
        #   protocol: UDP
        # - containerPort: 22000
        #   name: sync-tcp
        #   protocol: TCP
        # - containerPort: 21027
        #   name: discovery
        #   protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 60M
        volumeMounts:
        # - mountPath: /var/syncthing/config/index-v2-old/
        #   name: db-sqlite-old
        - mountPath: /var/syncthing/config/index-v2/
          name: db-sqlite
        
        - name: data-s3
          mountPath: /var/syncthing/
        # - mountPath: /var/syncthing/config/index-v2/bs13-data
        #   name: data-bs13
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /rest/noauth/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      - name: litestream
        image: litestream/litestream:0.3.13
        args:
        - 'replicate'
        volumeMounts:
        - name: db-sqlite
          mountPath: /var/syncthing/config/index-v2
        - name: configmap
          mountPath: /etc/litestream.yml
          subPath: litestream.yml
        env:
        - name: LITESTREAM_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: eso-s3-credentials
              key: LITESTREAM_ACCESS_KEY_ID
        - name: LITESTREAM_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: eso-s3-credentials
              key: LITESTREAM_SECRET_ACCESS_KEY
        ports:
        - name: metrics
          containerPort: 9090
      hostname: syncthing-backup-test
      hostNetwork: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 99
        runAsGroup: 100
        fsGroup: 100
        # sysctls:
        # - name: fs.inotify.max_user_watches
        #   value: "204800"
      volumes:
      # - name: tls-config
      #   secret:
      #     secretName: eso-syncthing-application
      - name: scripts
        configMap:
          name: syncthing-init
      - name: config-root
        emptyDir: {}
      - name: db-sqlite
        persistentVolumeClaim:
          claimName: syncthing-test-local
      - name: data-s3
        persistentVolumeClaim:
          claimName: syncthing-s3
      - name: configmap
        configMap:
          name: litestream

      # - name: data-bs13
      #   persistentVolumeClaim:
      #     claimName: syncthing-bs13

---
apiVersion: v1
kind: Service
metadata:
  name: syncthing
spec:
  selector:
    app.kubernetes.io/app: syncthing
  type: ClusterIP
  ports:
  - name: http
    port: 8384
    targetPort: http

# ---
# apiVersion: external-secrets.io/v1
# kind: ExternalSecret
# metadata:
#   name: syncthing-cert
#   namespace: syncthing
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: k8s-evergreen
#     kind: ClusterSecretStore
#   target:
#     name: cert-syncthing-buc-sh
#     creationPolicy: Owner
#   dataFrom:
#   - extract:
#       conversionStrategy: Default
#       decodingStrategy: None
#       key: cert-syncthing-buc-sh
#       metadataPolicy: None

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: syncthing-tls
spec:
  # tls:
  # - hosts:
  #     - syncthing.buc.sh
  #   secretName: cert-syncthing-buc-sh
  rules:
  - host: "syncthing-backup-test.10.0.0.21.nip.io"
    http:
      paths:
      - path: "/"
        pathType: Prefix
        backend:
          service:
            name: syncthing
            port:
              name: http


---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: syncthing-s3-pv
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 10Gi
  storageClassName: ""
  mountOptions:
  - endpoint-url http://10.0.0.19:9000
  - region us-east-1
  # - incremental-upload
  - upload-checksums crc32c
  - allow-delete
  - allow-overwrite
  # - allow-root
  - allow-other
  - debug
  csi:
    driver: s3.csi.aws.com
    volumeHandle: s3-csi-driver-syncthing-s3-pv
    volumeAttributes:
      bucketName: syncthing
      # cache: emptyDir
      # cacheEmptyDirSizeLimit: 1Gi
      # cacheEmptyDirMedium: Memory

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: syncthing-s3
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 10Gi
  volumeName: syncthing-s3-pv