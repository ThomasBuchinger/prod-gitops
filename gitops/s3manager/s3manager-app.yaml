---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: s3-credantials
  namespace: paperless
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: k8s-evergreen
    kind: ClusterSecretStore
  target:
    name: eso-s3-credentials
    creationPolicy: Owner
  data:
  - secretKey: ACCESS_KEY_ID
    remoteRef:
      key: static-secrets
      property: s3_accesskey
      conversionStrategy: Default
      decodingStrategy: None
      metadataPolicy: None
  - secretKey: SECRET_ACCESS_KEY
    remoteRef:
      key: static-secrets
      property: s3_secretkey
      conversionStrategy: Default
      decodingStrategy: None
      metadataPolicy: None
  - secretKey: RO_ACCESS_KEY_ID
    remoteRef:
      key: static-secrets
      property: s3_ro_accesskey
      conversionStrategy: Default
      decodingStrategy: None
      metadataPolicy: None
  - secretKey: RO_SECRET_ACCESS_KEY
    remoteRef:
      key: static-secrets
      property: s3_ro_secretkey
      conversionStrategy: Default
      decodingStrategy: None
      metadataPolicy: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3-manager
  labels:
    app.kubernetes.io/name: s3-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: s3-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: s3-manager
    spec:
      volumes:
      - name: cookie-secret-vol
        emptyDir: {}
      initContainers:
      - name: generate-cookie-secret
        image: busybox:1.36
        command: ["/bin/sh", "-c"]
        args:
          - |
            head -c 32 /dev/urandom | base64 > /secret/cookie_secret
        volumeMounts:
          - name: cookie-secret-vol
            mountPath: /secret
      containers:
      - name: s3-manager
        image: cloudlena/s3manager:latest
        env:
        - name: ENDPOINT
          value: "10.0.0.19:9000"
        - name: USE_SSL
          value: "false"
        - name: REGION
          value: us-east-1
        - name: ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: ACCESS_KEY_ID
              name: eso-s3-credentials
        - name: SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: SECRET_ACCESS_KEY
              name: eso-s3-credentials
        securityContext:
          capabilities:
            drop:
            - ALL
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
        ports:
          - containerPort: 4180
        env:
        - name: OAUTH2_PROXY_PROVIDER
          value: "oidc"
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          value: "https://dex.buc.sh"
        - name: OAUTH2_PROXY_CLIENT_ID
          value: "login"
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: notaSecretDexisLocal
        - name: OAUTH2_PROXY_COOKIE_SECRET_FILE
          value: /secret/cookie_secret
        - name: OAUTH2_PROXY_REDIRECT_URL
          value: "https://r2.buc.sh/oauth2/callback"
        - name: OAUTH2_PROXY_EMAIL_DOMAINS
          value: "*"
        - name: OAUTH2_PROXY_HTTP_ADDRESS
          value: "0.0.0.0:4180"
        - name: OAUTH2_PROXY_UPSTREAMS
          value: "http://localhost:8080"  # or your actual backend if you want proxying
        - name: OAUTH2_PROXY_SKIP_PROVIDER_BUTTON
          value: "true"
        - name: OAUTH2_PROXY_SCOPE
          value: "openid email profile"
        - name: OAUTH2_PROXY_COOKIE_SECURE
          value: "true"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
        volumeMounts:
        - name: cookie-secret-vol
          mountPath: /secret
          readOnly: true

---
kind: Service
apiVersion: v1
metadata:
  name: s3-manager
spec:
  selector:
      app.kubernetes.io/name: s3-manager
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: oauth2
    port: 4180
    targetPort: 4180

---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: cert-r2-buc-sh
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: k8s-evergreen
    kind: ClusterSecretStore
  target:
    name: cert-r2-buc-sh
    creationPolicy: Owner
  dataFrom:
  - extract:
      conversionStrategy: Default
      decodingStrategy: None
      metadataPolicy: None
      key: cert-r2-buc-sh

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: s3-manager
spec:
  tls:
  - hosts:
      - r2.buc.sh
    secretName: cert-r2-buc-sh
  rules:
  - host: r2.buc.sh
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: s3-manager
            port:
              name: oauth2
